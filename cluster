import cv2
import numpy as np
from skimage.color import rgb2gray
from matplotlib import pyplot as plt #graficos e imagens

#função mostrar

def mostrar(imagem):
  fig = plt.gcf()
  fig.set_size_inches(18,6)
  plt.imshow(cv2.cvtColor(imagem, cv2.COLOR_BGR2RGB))
  plt.axis('off')
  plt.show()

img = cv2.imread('celulas\\6.jpg')

#mostrar(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
'''
vetorizado = img.reshape((-1,3))
vetorizado = np.float32(vetorizado)
criterio = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
ret, label, centros = cv2.kmeans(vetorizado, k, None, criterio, 10, cv2.KMEANS_RANDOM_CENTERS)

centros = np.uint8(centros)
img_final = centros[label.flatten()]
print(img_final)

img_final = img_final.reshape(img.shape)
img_final.shape
'''
#mostrar(cv2.cvtColor(img_final, cv2.COLOR_BGR2RGB))

def segmentacao_cluster(img, k):
    vetorizado = img.reshape((-1,3))
    vetorizado = np.float32(vetorizado)
    criterio = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    ret, label, centros = cv2.kmeans(vetorizado, k, None, criterio, 10, cv2.KMEANS_RANDOM_CENTERS)
    centros = np.uint8(centros)
    img_final = centros[label.flatten()]
    img_final = img_final.reshape(img.shape)
    return img_final

seg_cluster = segmentacao_cluster(img, 4)
mostrar(seg_cluster)