import cv2
import numpy as np
from skimage.color import rgb2gray
from matplotlib import pyplot as plt #graficos e imagens

#Função mostar

img = cv2.imread("celulas\\b.jpg")
"""
a=img.shape

altura, largura = img.shape[0], img.shape[1]
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

img_flat = gray.reshape(altura * largura)
#print(img_flat)
#print(img_flat.shape)

#media = img_flat.mean()
#print(media)

#num_pixels = len(img_flat)
#print(num_pixels)
"""
"""
for i in range(num_pixels):
    if img_flat[i] > media:
        img_flat[i]=255
    else: 
        img_flat[i] = 0

#print(img_flat)

seg_regiao = img_flat.reshape(altura, largura)
seg_regiao.shape
"""
def flatten_img(img):
    altura, largura = img.shape[0], img.shape[1]
    img_flat = img.reshape(altura*largura)
    return img_flat

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img_flat = flatten_img(gray)
#print(img_flat)
#print(img_flat.shape)
#print('media: ' + str(img_flat.mean()))

gray = rgb2gray(img)
img_flat = flatten_img(gray)
#print(img_flat)
#print(img_flat.shape)
#print('media: ' + str(img_flat.mean()))

#Aplicando a duas regiões
"""def segmenta2regioes(img):
    pixels = flatten_img(img).copy()
    media = pixels.mean()
    for i in range(len(pixels)):
        if  pixels[i] > media:
            pixels[i] = 255
        else:
            pixels[i] = 0
    seg_regiao = pixels.reshape(img.shape[0], img.shape[1])
    return seg_regiao
"""
#Aplicação com 3 regiões
'''def segmenta3regioes(img):
    pixels = flatten_img(img).copy()
    for i in range(len(pixels)):
        if  pixels[i] > 0.66:
            pixels[i] = 2
        elif pixels [i] > 0.33:
            pixels [i] = 1
        else:
            pixels[i] = 0
    seg_regiao = pixels.reshape(img.shape[0], img.shape[1])
    return seg_regiao
'''

#Aplicação com 4 regiões
def segmenta4regioes(img):
    pixels = flatten_img(img).copy()
    for i in range(len(pixels)):
        if  pixels[i] > 0.75:
            pixels[i] = 3
        elif pixels [i] > 0.5:
            pixels [i] = 2
        elif pixels [i] > 0.25:
            pixels [i] = 1
        else:
            pixels[i] = 0
    seg_regiao = pixels.reshape(img.shape[0], img.shape[1])
    return seg_regiao
seg_regiao = segmenta4regioes(gray)
cv2.imshow("Original", seg_regiao)

"""
#aplicação com 5 regiões
def segmenta5regioes(img):
    pixels = flatten_img(img).copy()
    for i in range(len(pixels)):
        if  pixels[i] > 0.8:
            pixels[i] = 4
        elif pixels [i] > 0.6:
            pixels [i] = 3
        elif pixels [i] > 0.4:
            pixels [i] = 2
        elif pixels [i] > 0.2:
            pixels [i] = 1
        else:
            pixels[i] = 0
    seg_regiao = pixels.reshape(img.shape[0], img.shape[1])
    return seg_regiao

seg_regiao = segmenta5regioes(gray)
imagemProcessada = cv2.resize(seg_regiao, (0,0), fx=0.5, fy=0.5)
cv2.imshow("Original", imagemProcessada)
"""

cv2.waitKey(0)
cv2.destroyAllWindows()